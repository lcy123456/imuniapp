<template>
    <view>
        <web-view
            ref="webviewRef"
            @onPostMessage="handlePostMessage"
            :style="{width: systemInfo.windowWidth + 'px', height: systemInfo.windowHeight + 'px'}"
            :src="src"
        />
    </view>
</template>

<script>
import { mapGetters, mapActions } from "vuex";
import { AudioVideoType, AudioVideoStatus } from '@/enum';
import {
    PageEvents
} from '@/constant';
import IMSDK, {
    IMMethods,
    SessionType,
} from 'openim-uniapp-polyfill';

export default {
    data () {
        return {
            time: '',
            updateKey: '',
            systemInfo: uni.getSystemInfoSync(),
            innerAudioContext: null,
        }
    },
    computed: {
        ...mapGetters([
            "storeIncomingCallMessage",
            "storeIncomingCallCallTime",
            "storeIsIncomingCallTop",
			"storeIsIncomingCallLoading",
            "storeIsIncomingCallIng",
            "storeIsAnswer",
            "storeIncomingCallUserInfo",
            "storeIncomingCallToken"
        ]),
        src () {
            return `/hybrid/html/chat.html`;
        }
    },
    watch: {
		storeIsIncomingCallTop: {
			handler(val){
				if(val) this.startMusic()
				else this.stopMusic()
			}
		}
    },
    onLoad () {
        console.log('onLoad-onLoad');
    },
    onReady () {
        uni.preloadPage({url: "/pages/conversation/webrtc/index"});
        console.log('onReady-onReady');
    },
    onShow () {
        console.log('onshow', this.time, this.storeIncomingCallCallTime);
        if (this.time !== this.storeIncomingCallCallTime) {
            const map = {
                message: this.storeIncomingCallMessage,
                isCallLoading: this.storeIsIncomingCallLoading,
                isCallIng: this.storeIsIncomingCallIng,
                isAnswer: this.storeIsAnswer,
                callUserInfo: this.storeIncomingCallUserInfo,
                token: this.storeIncomingCallToken
            }
            console.log('evalJs()=====发送参数给webview', map)
            this.$refs.webviewRef.evalJs(`uniEvent(${JSON.stringify(map)})`);
        }
        this.time = this.storeIncomingCallCallTime;
        console.log('onShow');
    },
    onUnload () {
        console.log('onUnloadonUnload');
    },
    onHide () {
        console.log('onHideonHideonHide');
		
        if(this.storeIsIncomingCallLoading) {
			this.onSmall()
		}
    },
    methods: {
        ...mapActions('incomingCall', ['onSmall', 'onDangerCall']),
        ...mapActions('message', ['pushNewMessage', 'updateOneMessage']),
        // 唤起铃声
        startMusic () {
            // 避免重复唤起铃声
            if (this.innerAudioContext != null) return;

            this.innerAudioContext = uni.createInnerAudioContext();
            this.innerAudioContext.autoplay = true;
            this.innerAudioContext.loop = true;
            this.innerAudioContext.src = '/static/audio/incoming_call_music.mp3';
        },
        // 销毁铃声
        stopMusic () {
            if (this.innerAudioContext == null) return;
            this.innerAudioContext.destroy();
            this.innerAudioContext = null;
        },
        handlePostMessage (event) {
            console.log('handlePostMessage()===', event)
            const [data] = event.detail.data
            if(data.isSmall) {
                // 缩小
                this.onSmall()
            }
            if(data.isDanger) {
                // 挂断
				console.log('挂断 this.onDangerCall()')
                this.reject();
                this.onDangerCall()
            }
            if(data.isSuccess) {
                // 接听
            }
        },
        async reject () {
            console.log(11);
            const message = await IMSDK.asyncApi(
                IMMethods.CreateCustomMessage,
                IMSDK.uuid(),
                {
                    data: JSON.stringify({
                        type: this.isVideo ? AudioVideoType.Video : AudioVideoType.Audio,
                        status: this.storeIncomingCallMessage.isAnswer ? AudioVideoStatus.Reject : AudioVideoStatus.Cancel
                    }),
                    extension: '',
                    description: ''
                }
            );
            const { recvID, groupID } = this.storeIncomingCallMessage;
            this.pushNewMessage({
                ...message,
                recvID,
                groupID,
                sessionType: recvID ? SessionType.Single : SessionType.WorkingGroup
            });
            console.log('this.storeIncomingCallMessage');
            const { data } = await IMSDK.asyncApi(IMMethods.SendMessage, IMSDK.uuid(), {
                recvID: recvID,
                groupID: groupID,
                message,
                offlinePushInfo: {
                    title: "you have a new message",
                    desc: "you have a new message",
                    ex: "",
                    iOSPushSound: "",
                    iOSBadgeCount: true
                }
            });
            console.log('data', data);
            this.updateOneMessage({
                message: data,
                isSuccess: true,
            });
            uni.$emit(PageEvents.ScrollToBottom);
        }
    }
}
</script>

<style>

</style>