<template>
    <view>
        <swiper
            :current="current"
            :disable-touch="disableTouch"
            :style="{
                width: systemInfo.windowWidth + 'px',
                height: systemInfo.windowHeight + 'px'
            }"
            @change="change"
        >
            <swiper-item
                v-for="(v, i) in list"
                :key="v.url + '-' + i"
                :style="{
                    width: systemInfo.windowWidth + 'px',
                    height: systemInfo.windowHeight + 'px'
                }"
            >
                <view
                    v-if="v.type === 'image' && Math.abs(current - i) < 3"
                    @touchmove="touchmove($event, v, i)"
                    @touchstart="touchstart($event, v, i)"
                    @touchend="touchend($event, v, i)"
                    @click="click($event, v, i)"
                >
                    <u--image
                        :show-loading="true"
                        :width="(v.width || systemInfo.windowWidth) + 'px'"
                        :height="(v.height || systemInfo.windowHeight) + 'px'"
                        :src="v.url"
                        :style="{
                            marginLeft: (v.left || 0) + 'px',
                            marginTop: (v.top || 0) + 'px'
                        }"
                        class="image"
                        mode="aspectFit"
                        @longpress.prevent.native="longpress(0)"
                    >
                        <template #loading>
                            <u-loading-icon color="red" />
                        </template>
                    </u--image>
                </view>
                <video
                    v-else-if="v.type === 'video' && Math.abs(current - i) < 3"
                    :id="v.url"
                    :src="v.url"
                    :style="{
                        width: systemInfo.windowWidth + 'px',
                        height: systemInfo.windowHeight + 'px'
                    }"
                    :poster="v.poster && v.poster[0]"
                    :show-fullscreen-btn="false"
                    @longpress="longpress(1)"
                />
            </swiper-item>
        </swiper>
        <u-action-sheet
            :safe-area-inset-bottom="true"
            round="12"
            :actions="actionSheetMenu"
            :close-on-click-overlay="true"
            :close-on-click-action="true"
            :show="showActionSheet"
            @select="selectClick"
            @close="showActionSheet = false"
        />
    </view>
</template>

<script>
export default {
    data() {
        return {
            list: [],
            touchMap: [],
            current: 0,
            clickCount: 0,
            touchstartCount: 0,
            disableTouch: false,
            item: null,
            showActionSheet: false,
            baseList: [
                {
                    name: '画像を保存',
                    type: 0
                },
                {
                    name: 'ビデオを保存する',
                    type: 1
                }
            ],
            actionSheetMenu: [],
            systemInfo: uni.getSystemInfoSync()
        };
    },

    onLoad(options) {
        const { list, current } = options;
        this.list = JSON.parse(decodeURIComponent(list));
        this.current = current;
        this.item = this.list[current];
        if (uni.$u.os() === 'android') {
            this.list.push({
                url: 'http://placeholder',
                type: ''
            });
            setTimeout(() => {
                this.list.pop();
            }, 0);
        }
    },

    methods: {
        longpress(type) {
            this.actionSheetMenu = [
                this.baseList[type],
                { name: 'キャンセル', type: 2 }
            ];
            this.showActionSheet = true;
        },
        fail() {
            uni.hideLoading();
            uni.showToast({
                title: '保存に失敗しました。後でもう一度お試しください',
                icon: 'none'
            });
        },
        touchstart(event, item) {
            const { windowWidth, windowHeight } = this.systemInfo;
            const changedTouches = event.changedTouches;
            item.width = item.width || windowWidth;
            item.height = item.height || windowHeight;
            item.left = item.left > 0 ? 0 : item.left;
            item.top = item.top > 0 ? 0 : item.top;
            changedTouches.forEach(m => {
                this.touchMap[m.identifier] = {
                    pageX: m.pageX,
                    pageY: m.pageY,
                    startX: m.pageX,
                    startY: m.pageY,
                    left: item.left,
                    top: item.top,
                    width: item.width,
                    height: item.height
                };
            });
            if (Object.keys(this.touchMap).length === 2) {
                const touchIdentifierList = Object.keys(this.touchMap);
                const touch1 = this.touchMap[touchIdentifierList[0]];
                const touch2 = this.touchMap[touchIdentifierList[1]];
                const initialDistance = this.getInitialDistance(touch1, touch2);
                item.initialDistance = initialDistance;
            }
        },
        touchmove(event, item, index) {
            const changedTouches = event.changedTouches;
            const list = [...this.list];
            const map = list[index];
            const { windowWidth, windowHeight } = this.systemInfo;
            const touchIdentifierList = Object.keys(this.touchMap);
            changedTouches.forEach(m => {
                this.touchMap[m.identifier] = {
                    ...(this.touchMap[m.identifier] || {}),
                    pageX: m.pageX,
                    pageY: m.pageY
                };
            });
            if (Object.keys(this.touchMap).length === 2) {
                const touch1 = this.touchMap[touchIdentifierList[0]];
                const touch2 = this.touchMap[touchIdentifierList[1]];
                const initialDistance = this.getInitialDistance(touch1, touch2);
                const proportion = initialDistance / map.initialDistance;
                const [centerX, centerY] = [
                    (touch1.startX + touch2.startX) / 2,
                    (touch1.startY + touch2.startY) / 2
                ];
                const startX = (centerX - touch1.left) * (1 - proportion);
                const startY = (centerY - touch1.top) * (1 - proportion);
                const width = touch1.width * proportion;
                const height = touch1.height * proportion;
                if (width >= windowWidth) {
                    map.left = touch1.left + startX;
                    map.top = touch1.top + startY;
                    map.width = width < windowWidth ? windowWidth : width;
                    map.height = height < windowHeight ? windowHeight : height;
                }
                touch1.isScale = true;
                touch2.isScale = true;
            } else if (Object.keys(this.touchMap).length === 1) {
                const touch1 = this.touchMap[touchIdentifierList[0]];
                const startX = touch1.pageX - touch1.startX;
                const startY = touch1.pageY - touch1.startY;
                if (!touch1.isScale) {
                    map.left =
                        touch1.left + startX > 0 ? 0 : touch1.left + startX;
                    map.top = touch1.top + startY > 0 ? 0 : touch1.top + startY;
                    if (map.width + map.left < windowWidth) {
                        map.left = -(map.width - windowWidth);
                    }
                    if (map.height + map.top < windowHeight) {
                        map.top = -(map.height - windowHeight);
                    }
                }
            }
            this.list = list;
            this.disableTouch =
                item.left < -5 && item.left + item.width > windowWidth;
        },
        touchend(event, item, index) {
            const changedTouches = event.changedTouches;
            const touchMap = { ...this.touchMap };
            const { windowWidth, windowHeight } = this.systemInfo;
            const list = [...this.list];
            const map = list[index];
            changedTouches.forEach(m => {
                delete touchMap[m.identifier];
            });
            this.touchMap = touchMap;
            if (map.width + map.left < windowWidth) {
                map.left = -(map.width - windowWidth);
            }
            if (map.height + map.top < windowHeight) {
                map.top = -(map.height - windowHeight);
            }
            this.list = list;
            this.disableTouch =
                item.left < -5 && item.left + item.width > windowWidth;
        },
        getInitialDistance(touch1, touch2) {
            return Math.sqrt(
                (touch1.pageX - touch2.pageX) * (touch1.pageX - touch2.pageX) +
                    (touch1.pageY - touch2.pageY) *
                        (touch1.pageY - touch2.pageY)
            );
        },
        selectClick({ type }) {
            if (type !== 2) {
                uni.showLoading();
                uni.downloadFile({
                    url: this.list[this.current].url,
                    success: res => {
                        if (res.statusCode === 200) {
                            uni.saveImageToPhotosAlbum({
                                filePath: res.tempFilePath,
                                success: () => {
                                    uni.hideLoading();
                                    uni.showToast({
                                        title: '保存成功',
                                        icon: 'success'
                                    });
                                },
                                fail: () => {
                                    this.fail();
                                }
                            });
                        } else {
                            this.fail();
                        }
                    },
                    fail: () => {
                        this.fail();
                    }
                });
            } else {
                this.showActionSheet = false;
            }
        },
        change(e) {
            let current = e.detail.current;
            if (this.item.type === 'video') {
                let video = uni.createVideoContext(this.item.url, this);
                video && video.pause();
            }
            this.current = current;
            this.item = this.list[current];
            const list = [...this.list];
            list.forEach(item => {
                this.initImageItem(item);
            });
            this.list = list;
            // console.log('change---', this.list);
        },
        click(event, item, index) {
            this.clickCount++;
            console.log('this.clickCount', this.clickCount);
            if (this.clickCount === 1) {
                this.timer = setTimeout(() => {
                    this.clickCount = 0;
                }, 300);
            } else if (this.clickCount === 2) {
                clearTimeout(this.timer);
                this.clickCount = 0;
                const list = [...this.list];
                this.initImageItem(list[index]);
                this.list = list;
            }
        },
        initImageItem(item) {
            const { windowWidth, windowHeight } = this.systemInfo;
            item.width = windowWidth;
            item.height = windowHeight;
            item.left = 0;
            item.top = 0;
            return item;
        }
    }
};
</script>

<style lang="scss" scoped>
.image {
    // transition: all 1s;
    // border: 1px solid red;
    // transform-origin: 0% 0%;
    // transform: scale(0.5);
}
</style>
