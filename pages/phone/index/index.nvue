<template>
    <view>
        <web-view  ref="webviewRef" src="/hybrid/html/phoneCall.html" style="width: 100vw;height: 750px;" @onPostMessage="getMessage"></web-view>
    </view>
</template>

<script>
export default {
    data () {
        return {
			wv: null, // 定义(app)webview对象节点
			webV: {}, // 定义(H5)webview对象节点
			sendData: [], // 发送数据对象
        };
    },
    onLoad () {
        console.log('phone/index/index.nvue  onLoad');
		
		setTimeout(()=> {
			const info = {name: '嘻嘻'}
			this.$refs.webviewRef.evalJs(`uniEvent(${JSON.stringify(info)})`);
			// this.$refs.webviewRef.evalJs(`document.body.style.background ='#00FF00'`);
		}, 2000)
    },
    onShow () {
        console.log('phone/index/index.nvue  onShow');
    },
    methods: {
        getMessage(event) {
            console.log('getMessage()===', event)
        }
    }
};
</script>

<!-- 
<script module="renderScript" lang="renderjs">
import {
    Participant,
    RemoteParticipant,
    RemoteTrack,
    RemoteTrackPublication,
    Room,
    RoomEvent,
} from 'livekit-client';
export default {
    data () {
        return {
            device: '',
            trackList: [],
            systemInfo: uni.getSystemInfoSync(),
            room: null
        }
    },
    methods: {
        onChangeWSURL(newValue, oldValue, ownerVm, vm) {
          this.renderWSURL = newValue
        },

        onChangeToken(newValue, oldValue, ownerVm, vm) {
          this.renderToken = newValue
          if(!this.renderToken) return

          this.testOpenRoom()
        },

        onChangeHandleAttr(newValue, oldValue, ownerVm, vm) {
          // isActiveMic: false, // 麦克风
          // isActiveSpeak: false, // 扬声器
          // isActiveCam: true, // 摄像头
          // isActiveOverturn: false, // 翻转

          // oldValue第一次是空值
          if(!oldValue) oldValue = newValue
          const {isActiveMic, isActiveSpeak, isActiveCam, isActiveOverturn} = newValue
          const {isActiveMic: isActiveMicOld, isActiveSpeak: isActiveSpeakOld, isActiveCam: isActiveCamOld, isActiveOverturn: isActiveOverturnOld} = oldValue

          const keys = Object.keys(newValue)
          if(isActiveMic != isActiveMicOld)
            this.toggleAudio()
          else if(isActiveSpeak != isActiveSpeakOld)
            console.log('扬声器===待实现===')
          else if(isActiveCam != isActiveCamOld)
            this.toggleVideo()
          else if(isActiveOverturn != isActiveOverturnOld)
            this.toggleVideoInput()
        },

        getDom (id) {
            return document.getElementById(id);
        },
        setDomAttr (map) {
            const { width = `${this.systemInfo.windowWidth}px`, height = `${this.systemInfo.windowHeight}px`, id, dom } = map;
            dom.id = id;
            dom.style.width = width;
            dom.style.height = height;
        },
        updateData () {
            this.testOpenRoom();
        },
        async toggleAudio () {
            if (!this.room) return;
            const enabled = this.room?.localParticipant?.isMicrophoneEnabled;
            await this.room?.localParticipant?.setMicrophoneEnabled(!enabled);
        },

        async toggleVideo () {
            if (!this.room) return;
            const enabled = this.room?.localParticipant.isCameraEnabled;
            await this.room?.localParticipant.setCameraEnabled(!enabled);
        },

        async toggleVideoInput () {
            const devices = await Room.getLocalDevices('videoinput');
            if (this.device === '') {
                this.device = devices[1];
            } else {
                const otherDevices = devices.filter(item => item.deviceId !== this.device.deviceId);
                this.device = otherDevices[0];
            }
            this.device && await this.room.switchActiveDevice('videoinput', this.device.deviceId);
        },
        async testOpenRoom () {
            const wsURL = `ws://192.168.2.20:7880`;
            const token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MDAzMDM2NDIsImlzcyI6IkFQSVZWQ3BETGtaTHZSViIsIm5iZiI6MTY5NzcxMTY0Miwic3ViIjoicGFydGljaXBhbnRJZGVudGl0eTEiLCJ2aWRlbyI6eyJyb29tIjoiTVVTSyIsInJvb21Kb2luIjp0cnVlfX0._-3jkKTw-wBFJVI6BCN2bBdbEQKujeUwHVazttNCNCE`;
            this.room = new Room();
            this.trackList = [];
            try {
                await this.room.connect(wsURL, token);
                console.log('connected to room----', this.room.name);
                const p = this.room.localParticipant;
                // await p.enableCameraAndMicrophone();
                const myBoxDom = this.getDom('my-box');
                const otherDom = this.getDom('other-box');
                this.room.on(RoomEvent.ParticipantDisconnected, (participant) => {
                    this.removeElment({
                        participant,
                        parentDom: otherDom
                    });
                });
                this.room?.participants?.forEach(participant => {
                    participant?.tracks?.forEach(track => {
                        this.addElement({
                            participant,
                            track: track.track,
                            parentDom: otherDom
                        });
                    });
                });
                this.room.on(RoomEvent.TrackSubscribed, (track, publication, participant) => {
                    this.addElement({
                        parentDom: otherDom,
                        track,
                        participant
                    });
                })
                await p.setCameraEnabled(true);
                await p.setMicrophoneEnabled(true);
                const cameraTrack = p.getTrack(RemoteTrack.Source.Camera);
                const myVideo = cameraTrack?.track?.attach();
                if (!myBoxDom.children[0]) {
                    // this.setDomAttr({
                    //     dom: myVideo,
                    //     id: 'myVideo'
                    // })
                    myVideo.id = 'myVideo'
                    myBoxDom.appendChild(myVideo);
                }
            } catch (err) {
                console.log('fail -----connected to room----', err);
            }
        },
        addElement ({ parentDom, track, participant}) {
            const { identity } = participant;
            const element = track.attach();
            const type = `${identity}-${track.kind}`;
            if (this.trackList.includes(type)) {
                const dom = this.getDom(type);
                parentDom.removeChild(dom);
            }
            this.setDomAttr({
                dom: element,
                id: type
            })
            parentDom.appendChild(element);
            this.trackList.push(type);
        },
        removeElment ({parentDom, participant}) {
            const { identity } = participant;
            const video = this.getDom(`${identity}-video`);
            const audio = this.getDom(`${identity}-audio`);
            this.trackList = this.trackList.filter(item => ![`${identity}-video`, `${identity}-audio`].includes(item));
            parentDom.removeChild(video);
            parentDom.removeChild(audio);
        },
        beforeDestroy () {
            this.room && this.room.disconnect();
            this.myVideo = null;
            this.trackList = [];
        }
    }
}
</script> -->

<style lang="scss" scoped></style>
